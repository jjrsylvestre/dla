<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
© 2021–2023 Jeremy Sylvestre

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the appendix entitled “GNU Free
Documentation License” that appears in the output document of this
PreTeXt source code. All trademarks™ are the registered® marks of their
respective owners.
*********************************************************************-->


<section xml:id="section-sage-basics">
<title>Basics</title>

<paragraphs><title>Basic computations</title>
<p>Use the <em>Evaluate</em> button below the Sage cell to try it out.</p>
<sage>
	<input> 3+4 </input>
	<output> 7 </output>
</sage>
<sage>
	<input> cos(pi) </input>
	<output> -1 </output>
</sage>
</paragraphs>

<paragraphs><title>Creating and evaluating a function</title>
<sage>
	<input>
		f(x) = 2*x^2 + 4
		f(3)
	</input>
	<output> 22 </output>
</sage>
<p>
If you want to use a variable other than <c>x</c> in your expressions,
you need to tell Sage about it.
</p>
<sage>
	<input>
		var('x,y')
		g(x,y) = x^2 + y^2
		g(3,-1)
	</input>
	<output> 10 </output>
</sage>
</paragraphs>

<paragraphs><title>Constants and standard functions</title>
<p>
Sage knows about all the usual constants and functions.
Careful, Sage uses <c>I</c> as the imaginary number.
</p>
<sage>
	<input> sin(pi) </input>
	<output> 0 </output>
</sage>
<sage>
	<input> log(e) </input>
	<output> 1 </output>
</sage>
<sage>
	<input> I^2 </input>
	<output> -1 </output>
</sage>
</paragraphs>

<paragraphs><title>Referring to previous results</title>
<p>
You can use an underscore to refer to the previous output,
two underscores to refer to the output from two commands ago,
and three underscores to refer to the output from three commands ago.
(I think that's as far as it goes, but give it a try.)
</p>
<p> Here, the <q>previous</q> output will be from the last cell that computes <c>I^2</c> above. </p>
<sage>
	<input> _ + 1 </input>
	<output> 0 </output>
</sage>
<sage>
	<input> __ + 1 </input>
	<output> 0 </output>
</sage>
<sage>
	<input> ___ + 1 </input>
	<output> 0 </output>
</sage>
</paragraphs>

<paragraphs><title>Working with objects</title>
<p>
Sage treats everything as a Python object,
so you can apply methods to them.
</p>
<sage>
	<input>
		a = (x + 1)*(x - 3)
		a.expand()
	</input>
	<output>
		x^2 - 2 * x - 3
	</output>
</sage>
<p>
Notice that Sage didn't actually output anything for the initial assignment of the expression in the variable <c>x</c> to the variable <c>a</c>.
If you want confirmation of your input, use the print command.
(If you are using a Sage command line installed locally on your computer, you can just type the variable and hit enter without the <c>print</c> part.)
</p>
<sage>
	<input> print(a) </input>
	<output> (x + 1)*(x - 3) </output>
</sage>
<p>
Other things you might want to do with polynomial objects:
</p>
<sage>
	<input>
		b = x^2 - 2 * x + 1
		b.factor()
	</input>
	<output> (x - 1)^2 </output>
</sage>
<sage>
	<input>
		c = x^2 - 2 * x + x + 1
		c.simplify()
	</input>
	<output> x^2 - x + 1 </output>
</sage>
</paragraphs>

<paragraphs><title>Evaluating numerical results to a decimal number</title>
<p> Use the <c>n()</c> method to evaluate to a decimal <em>n</em>umber. </p>
<sage>
	<input> pi.n() </input>
	<output> 3.14159265358979 </output>
</sage>
</paragraphs>

</section>
