<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
© 2021–2023 Jeremy Sylvestre

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the appendix entitled “GNU Free
Documentation License” that appears in the output document of this
PreTeXt source code. All trademarks™ are the registered® marks of their
respective owners.
*********************************************************************-->


<section xml:id="section-sage-diag">
<title>Diagonal form</title>

<p> In this example we apply the diagonalization procedure to a <m>3 \times 3</m>
<me> A = \begin{bmatrix} 7 \amp -12 \amp -4 \\ 4 \amp -9 \amp -4 \\ -4 \amp 12 \amp 7 \end{bmatrix} </me>.
</p>
<sage>
	<input>
		A = matrix( [ [7,-12,-4], [4,-9,-4], [-4,12,7] ] )
		print(A)
	</input>
	<output>
		[  7 -12  -4]
		[  4  -9  -4]
		[ -4  12   7]
	</output>
</sage>

<paragraphs><title>Eigenvalues</title>

<p> We can calculate the characteristic polynomial ourselves. </p>
<sage>
	<input>
		xA = x*identity_matrix(3) - A
		print(xA)
		print()
		xA.det().factor()
	</input>
	<output>
		[x - 7    12     4]
		[   -4 x + 9     4]
		[    4   -12 x - 7]

		(x + 1)*(x - 3)^2
	</output>
</sage>
<p>Or we can have Sage do it.</p>
<sage>
	<input>
		A.charpoly().factor()
	</input>
	<output>(x + 1) * (x - 3)^2</output>
</sage>
<p>
So the eignevalues are <m>\lambda = -1</m> and <m>\lambda = 3</m>.
But we could have had Sage do this for us.
</p>
<sage>
	<input>A.eigenvalues()</input>
	<output>[-1, 3, 3]</output>
</sage>
<p>
Notice that the output is a list of eigenvalues,
with each eigenvalue repeated in the list according to its algebraic multiplicity.
</p>

</paragraphs>

<paragraphs><title>Eigenvectors</title>

<p>
Let's analyze <m>\lambda = 3</m>,
since this eigenvalue had algebraic multiplicity <m>2</m>.
We also need geometric multiplicity <m>2</m> in order for matrix <m>A</m> to be diagonalizable;
if this geometric multiplicity is only <m>1</m>, then analyzing <m>\lambda = -1</m> would be a waste of time.
</p>
<sage>
	<input>
		C = 3 * identity_matrix(3) - A
		print(C)
		print()
		C.rref()
	</input>
	<output>
		[ -4  12   4]
		[ -4  12   4]
		[  4 -12  -4]

		[ 1 -3 -1]
		[ 0  0  0]
		[ 0  0  0]
	</output>
</sage>
<p>
As desired, two parameters are required, so we may proceed.
Assigning <m>x_2 = s</m> and <m>x_3 = t</m> leads to independent eigenvectors
<md><mrow> \uvec{p}_1 \amp = (3,1,0) \text{,} \amp \uvec{p}_2 \amp = (1,0,1) \text{.} </mrow></md>
</p>
<sage>
	<input>
		p1 = vector((3,1,0))
		p2 = vector((1,0,1))
		print(p1,p2)
		print(A*p1,A*p2)
	</input>
	<output>
		(3, 1, 0) (1, 0, 1)
		(9, 3, 0) (3, 0, 3)
	</output>
</sage>
<p> Notice that <m>A \uvec{p}_j = 3 \uvec{p}_j</m> for each of these two vectors, as expected. </p>

<p> Now let's analyze <m>\lambda = -1</m>. </p>
<sage>
	<input>
		C = -1 * identity_matrix(3) - A
		print(C)
		print()
		C.rref()
	</input>
	<output>
		[ -8  12   4]
		[ -4   8   4]
		[  4 -12  -8]

		[1 0 1]
		[0 1 1]
		[0 0 0]
	</output>
</sage>
<p>
We need one parameter, as expected from the algebraic multiplicity.
Assigning <m>x_3 = t</m> leads to eigenvector <m>\uvec{p}_3 = (-1,-1,1)</m>.
</p>
<sage>
	<input>
		p3 = vector((-1,-1,1))
		print(p3)
		A*p3
	</input>
	<output>
		(-1, -1, 1)
		(1, 1, -1)
	</output>
</sage>
<p> Notice that <m>A \uvec{p}_3 = - \uvec{p}_3</m>, as expected. </p>

</paragraphs>

<paragraphs><title>The transition matrix</title>

<p> We now have our basis of independent eigenvectors to form the transition matrix <m>P</m>. </p>
<sage>
	<input>
		P = column_matrix( [ p1, p2, p3 ] )
		print(P)
		print()
		print("rank is", P.rank())
	</input>
	<output>
		[ 3  1 -1]
		[ 1  0 -1]
		[ 0  1  1]

		rank is 3
	</output>
</sage>
<p>
The rank computation verifies that the columns of <m>P</m> are linearly independent
(but our theory also tells us this: eigenvectors from different eigenspaces are always independent).
</p>

</paragraphs>

<paragraphs><title>The diagonal matrix</title>

<p>
Let's compute <m>\inv{P} A P</m> in two different ways.
First, directly.
</p>
<sage>
	<input> P.inverse() * A * P </input>
	<output>
		[ 3  0  0]
		[ 0  3  0]
		[ 0  0 -1]
	</output>
</sage>
<p>
Notice the order of the eigenvalues down the diagonal <mdash />
this is due to the order we placed the eigenvectors as columns in <m>P</m>.
If we create a different transition matrix, we may get a different diagonal matrix.
</p>
<sage>
	<input>
		Q = column_matrix([p3, p1, p2])
		Q.inverse() * A * Q
	</input>
	<output>
		[-1  0  0]
		[ 0  3  0]
		[ 0  0  3]
	</output>
</sage>
<p>
Now let's use the idea in
<xref ref="subsection-similarity-examples-compute-invpap" />
to affirm that <m>\inv{P} A P</m> can also be computed by row reduction:
we augment <m>P</m> with the result of <m>A P</m>,
and then reducing the <m>P</m> part on the left to identity simultaneously applies <m>\inv{P}</m> to the <m>A P</m> part on the right.
<me>
	\left[\begin{array}{c|c} P \amp AP \end{array}\right] \qquad \rowredarrow \qquad
	\left[\begin{array}{c|c} I \amp \inv{P}(AP) \end{array}\right]
</me>
</p>
<sage>
	<input>
		P_AP = P.augment(A*P)
		print(P_AP)
		print()
		I_iPAP = P_AP.rref()
		print(I_iPAP)
	</input>
	<output>
		[ 3  1 -1  9  3  1]
		[ 1  0 -1  3  0  1]
		[ 0  1  1  0  3 -1]

		[ 1  0  0  3  0  0]
		[ 0  1  0  0  3  0]
		[ 0  0  1  0  0 -1]
	</output>
</sage>
<p>
As expected, there's our diagonal matrix on the right.
We can use Python-ic list comprehension to extract it, if we like.
</p>
<sage>
	<input>
		D = I_iPAP[:,3:6]
		print(D)
	</input>
	<output>
		[ 3  0  0]
		[ 0  3  0]
		[ 0  0 -1]
	</output>
</sage>
<p>
The first list-range specifier <c>:</c> says
<q> take <em>all</em> rows.</q>
The second list-range specifier <c>3:6</c> says
<q> take columns with index starting at 3 and ending <em>before</em> 6.</q>
Remember that Python uses 0-based indexing, so the column with index 3 is actually the fourth column.
And the last column has index 5, so we want to stop <em>before</em> 6 to include it.
</p>

</paragraphs>


</section>
