<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
© 2016–2024 Jeremy Sylvestre

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the appendix entitled “GNU Free
Documentation License” that appears in the output document of this
PreTeXt source code. All trademarks™ are the registered® marks of their
respective owners.
*********************************************************************-->


<section xml:id="section-jordan-concepts">

<title>Concepts</title>

<assemblage><title>In this section</title><p><ul>
<li><xref ref="subsection-jordan-concepts-form-props" /><nbsp /><nbsp />
<em><xref text="title" ref="subsection-jordan-concepts-form-props" /></em></li>
<li><xref ref="subsection-jordan-concepts-form-unique" /><nbsp /><nbsp />
<em><xref text="title" ref="subsection-jordan-concepts-form-unique" /></em></li>
<li><xref ref="subsection-jordan-concepts-proc" /><nbsp /><nbsp />
<em><xref text="title" ref="subsection-jordan-concepts-proc" /></em></li>
<li><xref ref="subsection-jordan-concepts-indirect" /><nbsp /><nbsp />
<em><xref text="title" ref="subsection-jordan-concepts-indirect" /></em></li>
</ul></p></assemblage>

<subsection xml:id="subsection-jordan-concepts-form-props">
<title>Properties of Jordan normal form</title>

<p>
First, let's visualize the overall form of a matrix in Jordan normal form:
<md><mrow xml:id="equation-jordan-concepts-form" tag="star">
	\begin{bmatrix}
		\boxed{
			\begin{smallmatrix}
				J_1(\lambda_1) \\
				\amp J_2(\lambda_1) \\
				\amp \amp \ddots \\
				\amp \amp \amp J_{r_1}(\lambda_1)
			\end{smallmatrix}
		} \\
		\amp
		\boxed{
			\begin{smallmatrix}
				J_{r_1 + 1}(\lambda_2) \\
				\amp J_{r_1 + 2}(\lambda_2) \\
				\amp \amp \ddots \\
				\amp \amp \amp J_{r_1 + r_2}(\lambda_2)
			\end{smallmatrix}
		} \\
		\amp \amp \ddots \\
		\amp \amp \amp
		\boxed{
			\begin{smallmatrix}
				\ddots \\
				\amp J_\ell(\lambda_k)
			\end{smallmatrix}
		}
	\end{bmatrix}
</mrow></md>.
As a Jordan normal form matrix is lower triangular,
the diagonal entries are precisely the eigenvalues of the matrix,
and the algebraic multiplicity of each eigenvalue is equal to the number of diagonal entries in total in which that eigenvalue appears.
In other words, the algebraic multiplicity of each eigenvalue is equal to the sum of the sizes of the Jordan blocks <m>J_i(\lambda_j)</m> for that eigenvalue,
corresponding to the size of a <q>macro</q> block enclosed in a box in the example matrix above.
If we started with a matrix in triangular block form,
these <q>macro</q> blocks would be the <q>simplified</q> form of each block in the triangular block form.
That is, a block in triangular block form will break up further into smaller Jordan blocks.
(See <xref ref="example-jordan-indirect" /> for an example.)
Going further in this direction,
notice that each Jordan block is a scalar-triangular form that can be decomposed into a scalar matrix and a matrix in elementary nilpotent form:
<me>
	J(\lambda)
	= \lambda I
	+ \begin{bmatrix}
		0 \\
		1 \amp 0 \\
		\amp \ddots \amp \ddots \\
		\amp \amp 1 \amp 0
	\end{bmatrix}
</me>.
So an elementary nilpotent matrix is just the special case of a Jordan block that has eigenvalue <m>0</m>.
</p>

</subsection>

<subsection xml:id="subsection-jordan-concepts-form-unique">
<title>Uniqueness of Jordan normal form</title>

<p>
Every matrix is similiar (over <m>\C</m>) to a Jordan normal form matrix
(see <xref ref="theorem-jordan-normal-form" />).
We would like to think of a matrix as having one and only one (unique) Jordan normal form,
so that we may use the Jordan normal form to represent and distinguish <term>similarity classes</term>.
However, if a matrix <m>A</m> has more that one distinct eigenvalue,
we could mix up the order of the eigenvalues to obtain a different matrix in Jordan normal form to which <m>A</m> is also similar.
Since there isn't any <q>natural</q> way to put the eigenvalues of a given matrix into a specific order,
we will have to settle for the fact that a matrix can have several Jordan normal forms.
In fact, our requirement that the Jordan blocks for a given eigenvalue <m>\lambda_j</m> be arranged in descending size isn't really <q>natural</q> either.
Why not ascending size?
Why not a random order of sizes?
We will just have to accept that a matrix can have many different Jordan normal forms.
But at least each of these Jordan normal form matrices will look essentially the same,
and all of them will be similar to one another (and to the original matrix).
</p>

</subsection>

<subsection xml:id="subsection-jordan-concepts-proc">
<title>Jordan normal form procedure</title>

<algorithm xml:id="procedure-jordan-concepts-form-proc">
	<title>Jordan normal form</title>
	<p>
	Given an <m>n \times n</m> matrix <m>A</m> whose characteristic polynomial factors completely,
	we can determine an invertible matrix <m>P</m> so that <m>\inv{P} A P</m> is in Jordan normal form as follows.
	<ol>
		<li xml:id="procedure-jordan-concepts-form-proc-triang-form-step">
			Use <xref ref="procedure-triang-block" />
			to obtain transition matrix <m>Q</m> so that <m>U = \inv{Q} A Q</m> is in triangular block form,
			with upper triangular blocks <m>U_1,\dotsc,U_k</m>,
			each corresponding to a distinct eigenvalue <m>\lambda_1,\dotsc,\lambda_k</m>, respectively, of <m>A</m>.
		</li>
		<li>
			For each index <m>i</m>,
			form the nilpotent matrix <m>N_i = U_i - \lambda_i I_{m_i}</m>,
			where <m>m_i</m> is both the size of <m>U_i</m> and the algebraic multiplicity of the eigenvalue <m>\lambda_i</m>.
			Then use one of the procedures from <xref ref="subsection-triang-nilpotent-concepts-proc" />
			(or some other method)
			to obtain an <m>m_i \times m_i</m> transition matrix <m>R_i</m> so that <m>\inv{R_i} N_i R_i</m> is in triangular-block nilpotent form.
			Using this same <m>R_i</m>, we will also have
			<me>
				U_i' = \inv{R_i} U_i R_i
				= \inv{R_i} (\lambda_i I_{m_i} + N_i) R_i
				= \lambda_i I_{m_i} + \inv{R_i} N_i R_i
			</me>,
			so that the matrix <m>U_i'</m> will be in Jordan normal form,
			but all Jordan blocks will have scalar part <m>\lambda_i</m>.
		</li>
		<li>
			Form the <m>n\times n</m>, block-diagonal transition matrix <m>R</m> with blocks <m>R_1,\dotsc,R_k</m>, in order, down the diagonal.
			Then set <m>P = QR</m>, so that
			<me> \inv{P} A P = \inv{R} \inv{Q} A Q R = \inv{R} U R </me>
			will be in Jordan normal form.
		</li>
	</ol>
	</p>
</algorithm>

</subsection>

<subsection xml:id="subsection-jordan-concepts-indirect">
<title>Determining the form indirectly</title>

<p>
Just as in <xref ref="subsection-triang-nilpotent-concepts-indirect" />,
it's possible to use rank calculations to determine the precise Jordan normal form matrix to which a given matrix <m>A</m> is similar without actually determining a transition matrix.
Since the first step in analyzing the form of a matrix is to determine its eigenvalues and their algebraic multiplicities by calculating the characteristic polynomial of the matrix,
we assume we have this information at our disposal.
</p><p>
Consider <m>A</m> to be similar to a Jordan normal form matrix
<me>
	J = \begin{bmatrix}
		\lambda_1 I + N_1 \\
		 \amp \lambda_2 I + N_2 \\
		 \amp \amp \ddots \\
		 \amp \amp \amp \lambda_\ell I + N_\ell
	\end{bmatrix}
</me>.
Note that each block above is <em>not</em> in general a Jordan block <mdash />
it is itself a block-diagonal matrix <em>made up</em> of one or more Jordan blocks.
And so each nilpotent part <m>N_i</m> of each eigenvalue-based block is in triangular-block nilpotent form.
To know the exact form, we just need to know the form of each nilpotent part.
We can approach this task using similar patterns to the ones described in
<xref ref="subsection-triang-nilpotent-concepts-indirect" />,
once we get those eigenvalues out of the way.
</p><p>
Consider the matrix
<me>
	J - \lambda_1 I
	= \begin{bmatrix}
		N_1 \\
		 \amp (\lambda_2 - \lambda_1) I + N_2 \\
		 \amp \amp \ddots \\
		 \amp \amp \amp (\lambda_\ell - \lambda_1) I + N_\ell
	\end{bmatrix}
</me>.
As there shouldn't be any duplicate eigenvalues,
the first block of <m>N_1 = J - \lambda_1 I</m> is the only one with zeros down the diagonal,
and the same is true of any power of <m>J - \lambda_1 I</m>.
So we will always have
<me> \rank (J - \lambda_1 I)^k = \rank N^k + m_2 + m_3 + \dotsb + m_\ell </me>,
where the <m>m_i</m> are the algebraic multiplicities of the other eigenvalues, as usual.
In this way, we can investigate the exact form of the nilpotent submatrix <m>N_1</m> exactly as in
<xref ref="subsection-triang-nilpotent-concepts-indirect" />,
with the understanding that to get at the ranks of powers of <m>N_1</m>,
we will have to subtract off the sum of the multiplicities of the other eigenvalues from the ranks of powers of <m>J - \lambda_1 I</m>.
Similarly, we can investigate the form of any of the nilpotent <m>N_i</m> using the ranks of powers of <m>J - \lambda_i I</m>.
</p><p>
Now, if <m>A</m> is similar to <m>J</m>,
then <m>A - \lambda_i I</m> is similar to <m>J - \lambda_i I</m> for each eigenvalue <m>\lambda_i</m>.
(See the proof of <xref ref="theorem-similarity-similar-same-char-poly-evals-transformed-evecs" />.)
So the ranks of powers of the matrices <m>A - \lambda_i I</m> will tell us the ranks of the powers of the matrices <m>J - \lambda_i I</m>,
which means that we can learn the exact form of <m>J</m> by computing the ranks of powers of <m>A - \lambda_i I</m>.
</p><p>
See <xref ref="example-jordan-indirect" /> for a simple example of using this kind of reasoning.
</p>

</subsection>

</section>
